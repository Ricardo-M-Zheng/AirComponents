/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AirStockFinder {
    }
    interface AirStockPrice {
        "stockSymbol": string;
    }
    interface UcSideDrawer {
        "open": () => Promise<void>;
        "opened": boolean;
        "title": string;
    }
}
export interface AirStockFinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAirStockFinderElement;
}
declare global {
    interface HTMLAirStockFinderElementEventMap {
        "airSymbolSelected": string;
    }
    interface HTMLAirStockFinderElement extends Components.AirStockFinder, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAirStockFinderElementEventMap>(type: K, listener: (this: HTMLAirStockFinderElement, ev: AirStockFinderCustomEvent<HTMLAirStockFinderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAirStockFinderElementEventMap>(type: K, listener: (this: HTMLAirStockFinderElement, ev: AirStockFinderCustomEvent<HTMLAirStockFinderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAirStockFinderElement: {
        prototype: HTMLAirStockFinderElement;
        new (): HTMLAirStockFinderElement;
    };
    interface HTMLAirStockPriceElement extends Components.AirStockPrice, HTMLStencilElement {
    }
    var HTMLAirStockPriceElement: {
        prototype: HTMLAirStockPriceElement;
        new (): HTMLAirStockPriceElement;
    };
    interface HTMLUcSideDrawerElement extends Components.UcSideDrawer, HTMLStencilElement {
    }
    var HTMLUcSideDrawerElement: {
        prototype: HTMLUcSideDrawerElement;
        new (): HTMLUcSideDrawerElement;
    };
    interface HTMLElementTagNameMap {
        "air-stock-finder": HTMLAirStockFinderElement;
        "air-stock-price": HTMLAirStockPriceElement;
        "uc-side-drawer": HTMLUcSideDrawerElement;
    }
}
declare namespace LocalJSX {
    interface AirStockFinder {
        "onAirSymbolSelected"?: (event: AirStockFinderCustomEvent<string>) => void;
    }
    interface AirStockPrice {
        "stockSymbol"?: string;
    }
    interface UcSideDrawer {
        "opened"?: boolean;
        "title"?: string;
    }
    interface IntrinsicElements {
        "air-stock-finder": AirStockFinder;
        "air-stock-price": AirStockPrice;
        "uc-side-drawer": UcSideDrawer;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "air-stock-finder": LocalJSX.AirStockFinder & JSXBase.HTMLAttributes<HTMLAirStockFinderElement>;
            "air-stock-price": LocalJSX.AirStockPrice & JSXBase.HTMLAttributes<HTMLAirStockPriceElement>;
            "uc-side-drawer": LocalJSX.UcSideDrawer & JSXBase.HTMLAttributes<HTMLUcSideDrawerElement>;
        }
    }
}
